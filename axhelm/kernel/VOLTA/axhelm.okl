/*

   The MIT License (MIT)

   Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.

 */

// default to element-per-threadblock
@kernel void axhelm_v0(const dlong Nelements,
                       const dlong offset,
                       @restrict const dfloat*  ggeo,
                       @restrict const dfloat*  D,
                       @restrict const dfloat*  lambda,
                       @restrict const dfloat*  q,
                       @restrict dfloat*  Aq)
{
  for(dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_q[p_Nq][p_Nq];

    @shared dfloat s_Gqr[p_Nq][p_Nq];
    @shared dfloat s_Gqs[p_Nq][p_Nq];

    @exclusive dfloat r_qt, r_Gqt, r_Auk;
    @exclusive dfloat r_q[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_Aq[p_Nq];// array for results Au(i,j,0:N)

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;
    @exclusive dfloat r_lam0, r_lam1;

    // array of threads
    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq * j + i]; // D is column major

        // load pencil of u into register
        const dlong base = i + j * p_Nq + e * p_Np;
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; ++k) {
          r_q[k] = q[base + k * p_Nq * p_Nq]; // prefetch operation
          r_Aq[k] = 0.f; // zero the accumulator
        }
      }
    }

    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0; k < p_Nq; ++k) {
      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          // prefetch geometric factors
          const dlong gbase = e * p_Nggeo * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          r_G00 = ggeo[gbase + p_G00ID * p_Np];
          r_G01 = ggeo[gbase + p_G01ID * p_Np];
          r_G02 = ggeo[gbase + p_G02ID * p_Np];

          r_G11 = ggeo[gbase + p_G11ID * p_Np];
          r_G12 = ggeo[gbase + p_G12ID * p_Np];
          r_G22 = ggeo[gbase + p_G22ID * p_Np];

          r_GwJ = ggeo[gbase + p_GWJID * p_Np];

          r_lam0 = lambda[id + 0 * offset];
          r_lam1 = lambda[id + 1 * offset];
        }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // share u(:,:,k)
          s_q[j][i] = r_q[k];

          r_qt = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; ++m)
            r_qt += s_D[k][m] * r_q[m];
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          dfloat qr = 0.f;
          dfloat qs = 0.f;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; ++m) {
            qr += s_D[i][m] * s_q[j][m];
            qs += s_D[j][m] * s_q[m][i];
          }

          s_Gqs[j][i] = r_lam0 * (r_G01 * qr + r_G11 * qs + r_G12 * r_qt);
          s_Gqr[j][i] = r_lam0 * (r_G00 * qr + r_G01 * qs + r_G02 * r_qt);

          // put this here for a performance bump
          r_Gqt = r_lam0 * (r_G02 * qr + r_G12 * qs + r_G22 * r_qt);
          r_Auk = r_GwJ*r_lam1*r_q[k];
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; ++m) {
            r_Auk   += s_D[m][j] * s_Gqs[m][i];
            r_Aq[m] += s_D[k][m] * r_Gqt; // DT(m,k)*ut(i,j,k,e)
            r_Auk   += s_D[m][i] * s_Gqr[j][m];
          }

          r_Aq[k] += r_Auk;
        }
      }
    }

    // write out

    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; ++k) {
          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          Aq[id] = r_Aq[k];
        }
      }
    }
  }
}

@kernel void axhelmPartial_v0(const dlong Nelements,
                              const dlong offset,
                              @restrict const dlong*  elementList,
                              @restrict const dfloat*  ggeo,
                              @restrict const dfloat*  D,
                              @restrict const dfloat*  lambda,
                              @restrict const dfloat*  q,
                              @restrict dfloat*  Aq)
{
  for(dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_q[p_Nq][p_Nq];

    @shared dfloat s_Gqr[p_Nq][p_Nq];
    @shared dfloat s_Gqs[p_Nq][p_Nq];

    @exclusive dfloat r_qt, r_Gqt, r_Auk;
    @exclusive dfloat r_q[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_Aq[p_Nq];// array for results Au(i,j,0:N)

    @exclusive dlong element;

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;
    @exclusive dfloat r_lam0, r_lam1;

    // array of threads
    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq * j + i]; // D is column major
        element = elementList[e];

        // load pencil of u into register
        const dlong base = i + j * p_Nq + element * p_Np;
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; ++k) {
          r_q[k] = q[base + k * p_Nq * p_Nq]; // prefetch operation
          r_Aq[k] = 0.f; // zero the accumulator
        }
      }
    }

    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0; k < p_Nq; ++k) {
      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong id = element * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          // prefetch geometric factors
          const dlong gbase = element * p_Nggeo * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          r_G00 = ggeo[gbase + p_G00ID * p_Np];
          r_G01 = ggeo[gbase + p_G01ID * p_Np];
          r_G02 = ggeo[gbase + p_G02ID * p_Np];

          r_G11 = ggeo[gbase + p_G11ID * p_Np];
          r_G12 = ggeo[gbase + p_G12ID * p_Np];
          r_G22 = ggeo[gbase + p_G22ID * p_Np];

          r_GwJ = ggeo[gbase + p_GWJID * p_Np];

          r_lam0 = lambda[id + 0 * offset];
          r_lam1 = lambda[id + 1 * offset];
        }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // share u(:,:,k)
          s_q[j][i] = r_q[k];

          r_qt = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; ++m)
            r_qt += s_D[k][m] * r_q[m];
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          dfloat qr = 0.f;
          dfloat qs = 0.f;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; ++m) {
            qr += s_D[i][m] * s_q[j][m];
            qs += s_D[j][m] * s_q[m][i];
          }

          s_Gqs[j][i] = r_lam0 * (r_G01 * qr + r_G11 * qs + r_G12 * r_qt);
          s_Gqr[j][i] = r_lam0 * (r_G00 * qr + r_G01 * qs + r_G02 * r_qt);

          // put this here for a performance bump
          r_Gqt = r_lam0 * (r_G02 * qr + r_G12 * qs + r_G22 * r_qt);
          r_Auk = r_GwJ * r_lam1 * r_q[k];
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; ++m) {
            r_Auk   += s_D[m][j] * s_Gqs[m][i];
            r_Aq[m] += s_D[k][m] * r_Gqt; // DT(m,k)*ut(i,j,k,e)
            r_Auk   += s_D[m][i] * s_Gqr[j][m];
          }

          r_Aq[k] += r_Auk;
        }
      }
    }

    // write out

    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; ++k) {
          const dlong id = element * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          Aq[id] = r_Aq[k];
        }
      }
    }
  }
}

@kernel void axhelmPartial_bk_n3_v0(const dlong Nelements,
                                    const dlong offset,
                                    @restrict const dlong*  elementList,
                                    @restrict const dfloat* ggeo,
                                    @restrict const dfloat* D,
                                    @restrict const dfloat*  lambda,
                                    @restrict const dfloat* q,
                                    @restrict dfloat* Aq)
{
  for(dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_D[p_Nq][p_Nq];

    @shared dfloat s_U[p_Nq][p_Nq];
    @shared dfloat s_V[p_Nq][p_Nq];
    @shared dfloat s_W[p_Nq][p_Nq];

    @shared dfloat s_GUr[p_Nq][p_Nq];
    @shared dfloat s_GUs[p_Nq][p_Nq];

    @shared dfloat s_GVr[p_Nq][p_Nq];
    @shared dfloat s_GVs[p_Nq][p_Nq];

    @shared dfloat s_GWr[p_Nq][p_Nq];
    @shared dfloat s_GWs[p_Nq][p_Nq];

    @exclusive dfloat r_Ut, r_Vt, r_Wt;

    @exclusive dfloat r_U[p_Nq], r_V[p_Nq],  r_W[p_Nq];
    @exclusive dfloat r_AU[p_Nq], r_AV[p_Nq], r_AW[p_Nq];

    @exclusive dlong element;

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;

    // array of threads
    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq * j + i]; // D is column major

        element = elementList[e];

        // load pencil of u into register
        const dlong base = i + j * p_Nq + element * p_Np;

#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++) {
          //
          r_U[k] = q[base + k * p_Nq * p_Nq + 0 * offset];
          r_V[k] = q[base + k * p_Nq * p_Nq + 1 * offset];
          r_W[k] = q[base + k * p_Nq * p_Nq + 2 * offset];
          //
          r_AU[k] = 0.f;
          r_AV[k] = 0.f;
          r_AW[k] = 0.f;
        }
      }
    }

    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0; k < p_Nq; ++k) {
      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong id = element * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          // prefetch geometric factors
          const dlong gbase = element * p_Nggeo * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          r_G00 = ggeo[gbase + p_G00ID * p_Np];
          r_G01 = ggeo[gbase + p_G01ID * p_Np];
          r_G02 = ggeo[gbase + p_G02ID * p_Np];

          r_G11 = ggeo[gbase + p_G11ID * p_Np];
          r_G12 = ggeo[gbase + p_G12ID * p_Np];
          r_G22 = ggeo[gbase + p_G22ID * p_Np];

          r_GwJ = ggeo[gbase + p_GWJID * p_Np];
        }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // share u(:,:,k)
          s_U[j][i] = r_U[k];
          s_V[j][i] = r_V[k];
          s_W[j][i] = r_W[k];

          r_Ut = 0;
          r_Vt = 0;
          r_Wt = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            dfloat Dkm = s_D[k][m];
            r_Ut += Dkm * r_U[m];
            r_Vt += Dkm * r_V[m];
            r_Wt += Dkm * r_W[m];
          }
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          dfloat Ur = 0.f, Us = 0.f;
          dfloat Vr = 0.f, Vs = 0.f;
          dfloat Wr = 0.f, Ws = 0.f;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            dfloat Dim = s_D[i][m];
            dfloat Djm = s_D[j][m];

            Ur += Dim * s_U[j][m];
            Us += Djm * s_U[m][i];

            Vr += Dim * s_V[j][m];
            Vs += Djm * s_V[m][i];

            Wr += Dim * s_W[j][m];
            Ws += Djm * s_W[m][i];
          }

          s_GUr[j][i] = (r_G00 * Ur + r_G01 * Us + r_G02 * r_Ut);
          s_GVr[j][i] = (r_G00 * Vr + r_G01 * Vs + r_G02 * r_Vt);
          s_GWr[j][i] = (r_G00 * Wr + r_G01 * Ws + r_G02 * r_Wt);

          s_GUs[j][i] = (r_G01 * Ur + r_G11 * Us + r_G12 * r_Ut);
          s_GVs[j][i] = (r_G01 * Vr + r_G11 * Vs + r_G12 * r_Vt);
          s_GWs[j][i] = (r_G01 * Wr + r_G11 * Ws + r_G12 * r_Wt);

          r_Ut = (r_G02 * Ur + r_G12 * Us + r_G22 * r_Ut);
          r_Vt = (r_G02 * Vr + r_G12 * Vs + r_G22 * r_Vt);
          r_Wt = (r_G02 * Wr + r_G12 * Ws + r_G22 * r_Wt);
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          dfloat AUtmp = 0, AVtmp = 0, AWtmp = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            // 9 shared, 18 flops => 12TB/s*18/(9*8) = 3TFLOPS/s
            dfloat Dmi = s_D[m][i];
            dfloat Dmj = s_D[m][j];
            dfloat Dkm = s_D[k][m];

            AUtmp += Dmi * s_GUr[j][m];
            AUtmp += Dmj * s_GUs[m][i];

            AVtmp += Dmi * s_GVr[j][m];
            AVtmp += Dmj * s_GVs[m][i];

            AWtmp += Dmi * s_GWr[j][m];
            AWtmp += Dmj * s_GWs[m][i];

            r_AU[m] += Dkm * r_Ut;
            r_AV[m] += Dkm * r_Vt;
            r_AW[m] += Dkm * r_Wt;
          }

          r_AU[k] += AUtmp;
          r_AV[k] += AVtmp;
          r_AW[k] += AWtmp;
        }
      }
    }

    // write out

    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++) {
          const dlong id = element * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          Aq[id + 0 * offset] = r_AU[k];
          Aq[id + 1 * offset] = r_AV[k];
          Aq[id + 2 * offset] = r_AW[k];
        }
      }
    }
  }
}


@kernel void axhelm_bk_n3_v0(const dlong Nelements,
                             const dlong offset,
                             @restrict const dfloat* ggeo,
                             @restrict const dfloat* D,
                             @restrict const dfloat*  lambda,
                             @restrict const dfloat* q,
                             @restrict dfloat* Aq)
{
  for(dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_D[p_Nq][p_Nq];

    @shared dfloat s_U[p_Nq][p_Nq];
    @shared dfloat s_V[p_Nq][p_Nq];
    @shared dfloat s_W[p_Nq][p_Nq];

    @shared dfloat s_GUr[p_Nq][p_Nq];
    @shared dfloat s_GUs[p_Nq][p_Nq];

    @shared dfloat s_GVr[p_Nq][p_Nq];
    @shared dfloat s_GVs[p_Nq][p_Nq];

    @shared dfloat s_GWr[p_Nq][p_Nq];
    @shared dfloat s_GWs[p_Nq][p_Nq];

    @exclusive dfloat r_Ut, r_Vt, r_Wt;

    @exclusive dfloat r_U[p_Nq], r_V[p_Nq],  r_W[p_Nq];
    @exclusive dfloat r_AU[p_Nq], r_AV[p_Nq], r_AW[p_Nq];

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;

    // array of threads
    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq * j + i]; // D is column major

        // load pencil of u into register
        const dlong base = i + j * p_Nq + e * p_Np;

#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++) {
          //
          r_U[k] = q[base + k * p_Nq * p_Nq + 0 * offset];
          r_V[k] = q[base + k * p_Nq * p_Nq + 1 * offset];
          r_W[k] = q[base + k * p_Nq * p_Nq + 2 * offset];
          //
          r_AU[k] = 0.f;
          r_AV[k] = 0.f;
          r_AW[k] = 0.f;
        }
      }
    }

    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0; k < p_Nq; ++k) {
      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          // prefetch geometric factors
          const dlong gbase = e * p_Nggeo * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          r_G00 = ggeo[gbase + p_G00ID * p_Np];
          r_G01 = ggeo[gbase + p_G01ID * p_Np];
          r_G02 = ggeo[gbase + p_G02ID * p_Np];

          r_G11 = ggeo[gbase + p_G11ID * p_Np];
          r_G12 = ggeo[gbase + p_G12ID * p_Np];
          r_G22 = ggeo[gbase + p_G22ID * p_Np];

          r_GwJ = ggeo[gbase + p_GWJID * p_Np];
        }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // share u(:,:,k)
          s_U[j][i] = r_U[k];
          s_V[j][i] = r_V[k];
          s_W[j][i] = r_W[k];

          r_Ut = 0;
          r_Vt = 0;
          r_Wt = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            dfloat Dkm = s_D[k][m];
            r_Ut += Dkm * r_U[m];
            r_Vt += Dkm * r_V[m];
            r_Wt += Dkm * r_W[m];
          }
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          dfloat Ur = 0.f, Us = 0.f;
          dfloat Vr = 0.f, Vs = 0.f;
          dfloat Wr = 0.f, Ws = 0.f;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            dfloat Dim = s_D[i][m];
            dfloat Djm = s_D[j][m];

            Ur += Dim * s_U[j][m];
            Us += Djm * s_U[m][i];

            Vr += Dim * s_V[j][m];
            Vs += Djm * s_V[m][i];

            Wr += Dim * s_W[j][m];
            Ws += Djm * s_W[m][i];
          }

          s_GUr[j][i] = (r_G00 * Ur + r_G01 * Us + r_G02 * r_Ut);
          s_GVr[j][i] = (r_G00 * Vr + r_G01 * Vs + r_G02 * r_Vt);
          s_GWr[j][i] = (r_G00 * Wr + r_G01 * Ws + r_G02 * r_Wt);

          s_GUs[j][i] = (r_G01 * Ur + r_G11 * Us + r_G12 * r_Ut);
          s_GVs[j][i] = (r_G01 * Vr + r_G11 * Vs + r_G12 * r_Vt);
          s_GWs[j][i] = (r_G01 * Wr + r_G11 * Ws + r_G12 * r_Wt);

          r_Ut = (r_G02 * Ur + r_G12 * Us + r_G22 * r_Ut);
          r_Vt = (r_G02 * Vr + r_G12 * Vs + r_G22 * r_Vt);
          r_Wt = (r_G02 * Wr + r_G12 * Ws + r_G22 * r_Wt);
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          dfloat AUtmp = 0, AVtmp = 0, AWtmp = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            // 9 shared, 18 flops => 12TB/s*18/(9*8) = 3TFLOPS/s
            dfloat Dmi = s_D[m][i];
            dfloat Dmj = s_D[m][j];
            dfloat Dkm = s_D[k][m];

            AUtmp += Dmi * s_GUr[j][m];
            AUtmp += Dmj * s_GUs[m][i];

            AVtmp += Dmi * s_GVr[j][m];
            AVtmp += Dmj * s_GVs[m][i];

            AWtmp += Dmi * s_GWr[j][m];
            AWtmp += Dmj * s_GWs[m][i];

            r_AU[m] += Dkm * r_Ut;
            r_AV[m] += Dkm * r_Vt;
            r_AW[m] += Dkm * r_Wt;
          }

          r_AU[k] += AUtmp;
          r_AV[k] += AVtmp;
          r_AW[k] += AWtmp;
        }
      }
    }

    // write out

    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++) {
          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          Aq[id + 0 * offset] = r_AU[k];
          Aq[id + 1 * offset] = r_AV[k];
          Aq[id + 2 * offset] = r_AW[k];
        }
      }
    }
  }
}


@kernel void axhelm_n3_v0(const dlong Nelements,
                          const dlong offset,
                          @restrict const dfloat* ggeo,
                          @restrict const dfloat* D,
                          @restrict const dfloat*  lambda,
                          @restrict const dfloat* q,
                          @restrict dfloat* Aq)
{
  for(dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_D[p_Nq][p_Nq];

    @shared dfloat s_U[p_Nq][p_Nq];
    @shared dfloat s_V[p_Nq][p_Nq];
    @shared dfloat s_W[p_Nq][p_Nq];

    @shared dfloat s_GUr[p_Nq][p_Nq];
    @shared dfloat s_GUs[p_Nq][p_Nq];

    @shared dfloat s_GVr[p_Nq][p_Nq];
    @shared dfloat s_GVs[p_Nq][p_Nq];

    @shared dfloat s_GWr[p_Nq][p_Nq];
    @shared dfloat s_GWs[p_Nq][p_Nq];

    @exclusive dfloat r_Ut, r_Vt, r_Wt;

    @exclusive dfloat r_U[p_Nq], r_V[p_Nq],  r_W[p_Nq];
    @exclusive dfloat r_AU[p_Nq], r_AV[p_Nq], r_AW[p_Nq];

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;
    @exclusive dfloat r_lam0, r_lam1;

    // array of threads
    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq * j + i]; // D is column major

        // load pencil of u into register
        const dlong base = i + j * p_Nq + e * p_Np;

#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++) {
          //
          r_U[k] = q[base + k * p_Nq * p_Nq + 0 * offset];
          r_V[k] = q[base + k * p_Nq * p_Nq + 1 * offset];
          r_W[k] = q[base + k * p_Nq * p_Nq + 2 * offset];
          //
          r_AU[k] = 0.f;
          r_AV[k] = 0.f;
          r_AW[k] = 0.f;
        }
      }
    }

    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0; k < p_Nq; ++k) {
      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          // prefetch geometric factors
          const dlong gbase = e * p_Nggeo * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          r_G00 = ggeo[gbase + p_G00ID * p_Np];
          r_G01 = ggeo[gbase + p_G01ID * p_Np];
          r_G02 = ggeo[gbase + p_G02ID * p_Np];

          r_G11 = ggeo[gbase + p_G11ID * p_Np];
          r_G12 = ggeo[gbase + p_G12ID * p_Np];
          r_G22 = ggeo[gbase + p_G22ID * p_Np];

          r_GwJ = ggeo[gbase + p_GWJID * p_Np];

          r_lam0 = lambda[id + 0 * offset];
          r_lam1 = lambda[id + 1 * offset];
        }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // share u(:,:,k)
          s_U[j][i] = r_U[k];
          s_V[j][i] = r_V[k];
          s_W[j][i] = r_W[k];

          r_Ut = 0;
          r_Vt = 0;
          r_Wt = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            dfloat Dkm = s_D[k][m];
            r_Ut += Dkm * r_U[m];
            r_Vt += Dkm * r_V[m];
            r_Wt += Dkm * r_W[m];
          }
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          dfloat Ur = 0.f, Us = 0.f;
          dfloat Vr = 0.f, Vs = 0.f;
          dfloat Wr = 0.f, Ws = 0.f;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            dfloat Dim = s_D[i][m];
            dfloat Djm = s_D[j][m];

            Ur += Dim * s_U[j][m];
            Us += Djm * s_U[m][i];

            Vr += Dim * s_V[j][m];
            Vs += Djm * s_V[m][i];

            Wr += Dim * s_W[j][m];
            Ws += Djm * s_W[m][i];
          }

          s_GUr[j][i] = r_lam0 * (r_G00 * Ur + r_G01 * Us + r_G02 * r_Ut);
          s_GVr[j][i] = r_lam0 * (r_G00 * Vr + r_G01 * Vs + r_G02 * r_Vt);
          s_GWr[j][i] = r_lam0 * (r_G00 * Wr + r_G01 * Ws + r_G02 * r_Wt);

          s_GUs[j][i] = r_lam0 * (r_G01 * Ur + r_G11 * Us + r_G12 * r_Ut);
          s_GVs[j][i] = r_lam0 * (r_G01 * Vr + r_G11 * Vs + r_G12 * r_Vt);
          s_GWs[j][i] = r_lam0 * (r_G01 * Wr + r_G11 * Ws + r_G12 * r_Wt);

          r_Ut = r_lam0 * (r_G02 * Ur + r_G12 * Us + r_G22 * r_Ut);
          r_Vt = r_lam0 * (r_G02 * Vr + r_G12 * Vs + r_G22 * r_Vt);
          r_Wt = r_lam0 * (r_G02 * Wr + r_G12 * Ws + r_G22 * r_Wt);

          r_AU[k] += r_GwJ * r_lam1 * r_U[k];
          r_AV[k] += r_GwJ * r_lam1 * r_V[k];
          r_AW[k] += r_GwJ * r_lam1 * r_W[k];
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          dfloat AUtmp = 0, AVtmp = 0, AWtmp = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            // 9 shared, 18 flops => 12TB/s*18/(9*8) = 3TFLOPS/s
            dfloat Dmi = s_D[m][i];
            dfloat Dmj = s_D[m][j];
            dfloat Dkm = s_D[k][m];

            AUtmp += Dmi * s_GUr[j][m];
            AUtmp += Dmj * s_GUs[m][i];

            AVtmp += Dmi * s_GVr[j][m];
            AVtmp += Dmj * s_GVs[m][i];

            AWtmp += Dmi * s_GWr[j][m];
            AWtmp += Dmj * s_GWs[m][i];

            r_AU[m] += Dkm * r_Ut;
            r_AV[m] += Dkm * r_Vt;
            r_AW[m] += Dkm * r_Wt;
          }

          r_AU[k] += AUtmp;
          r_AV[k] += AVtmp;
          r_AW[k] += AWtmp;
        }
      }
    }

    // write out

    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++) {
          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          Aq[id + 0 * offset] = r_AU[k];
          Aq[id + 1 * offset] = r_AV[k];
          Aq[id + 2 * offset] = r_AW[k];
        }
      }
    }
  }
}

@kernel void axhelmPartial_n3_v0(const dlong Nelements,
                                 const dlong offset,
                                 @restrict const dlong*  elementList,
                                 @restrict const dfloat* ggeo,
                                 @restrict const dfloat* D,
                                 @restrict const dfloat* lambda,
                                 @restrict const dfloat* q,
                                 @restrict dfloat* Aq)
{
  for(dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_D[p_Nq][p_Nq];

    @shared dfloat s_U[p_Nq][p_Nq];
    @shared dfloat s_V[p_Nq][p_Nq];
    @shared dfloat s_W[p_Nq][p_Nq];

    @shared dfloat s_GUr[p_Nq][p_Nq];
    @shared dfloat s_GUs[p_Nq][p_Nq];

    @shared dfloat s_GVr[p_Nq][p_Nq];
    @shared dfloat s_GVs[p_Nq][p_Nq];

    @shared dfloat s_GWr[p_Nq][p_Nq];
    @shared dfloat s_GWs[p_Nq][p_Nq];

    @exclusive dfloat r_Ut, r_Vt, r_Wt;

    @exclusive dfloat r_U[p_Nq], r_V[p_Nq],  r_W[p_Nq];
    @exclusive dfloat r_AU[p_Nq], r_AV[p_Nq], r_AW[p_Nq];

    @exclusive dlong element;

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;
    @exclusive dfloat r_lam0, r_lam1;

    // array of threads
    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq * j + i]; // D is column major
        element = elementList[e];

        // load pencil of u into register
        const dlong base = i + j * p_Nq + element * p_Np;

#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++) {
          //
          r_U[k] = q[base + k * p_Nq * p_Nq + 0 * offset];
          r_V[k] = q[base + k * p_Nq * p_Nq + 1 * offset];
          r_W[k] = q[base + k * p_Nq * p_Nq + 2 * offset];
          //
          r_AU[k] = 0.f;
          r_AV[k] = 0.f;
          r_AW[k] = 0.f;
        }
      }
    }

    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0; k < p_Nq; ++k) {
      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong id = element * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          // prefetch geometric factors
          const dlong gbase = element * p_Nggeo * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          r_G00 = ggeo[gbase + p_G00ID * p_Np];
          r_G01 = ggeo[gbase + p_G01ID * p_Np];
          r_G02 = ggeo[gbase + p_G02ID * p_Np];

          r_G11 = ggeo[gbase + p_G11ID * p_Np];
          r_G12 = ggeo[gbase + p_G12ID * p_Np];
          r_G22 = ggeo[gbase + p_G22ID * p_Np];

          r_GwJ = ggeo[gbase + p_GWJID * p_Np];

          r_lam0 = lambda[id + 0 * offset];
          r_lam1 = lambda[id + 1 * offset];
        }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // share u(:,:,k)
          s_U[j][i] = r_U[k];
          s_V[j][i] = r_V[k];
          s_W[j][i] = r_W[k];

          r_Ut = 0;
          r_Vt = 0;
          r_Wt = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            dfloat Dkm = s_D[k][m];
            r_Ut += Dkm * r_U[m];
            r_Vt += Dkm * r_V[m];
            r_Wt += Dkm * r_W[m];
          }
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          dfloat Ur = 0.f, Us = 0.f;
          dfloat Vr = 0.f, Vs = 0.f;
          dfloat Wr = 0.f, Ws = 0.f;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            dfloat Dim = s_D[i][m];
            dfloat Djm = s_D[j][m];

            Ur += Dim * s_U[j][m];
            Us += Djm * s_U[m][i];

            Vr += Dim * s_V[j][m];
            Vs += Djm * s_V[m][i];

            Wr += Dim * s_W[j][m];
            Ws += Djm * s_W[m][i];
          }

          s_GUr[j][i] = r_lam0 * (r_G00 * Ur + r_G01 * Us + r_G02 * r_Ut);
          s_GVr[j][i] = r_lam0 * (r_G00 * Vr + r_G01 * Vs + r_G02 * r_Vt);
          s_GWr[j][i] = r_lam0 * (r_G00 * Wr + r_G01 * Ws + r_G02 * r_Wt);

          s_GUs[j][i] = r_lam0 * (r_G01 * Ur + r_G11 * Us + r_G12 * r_Ut);
          s_GVs[j][i] = r_lam0 * (r_G01 * Vr + r_G11 * Vs + r_G12 * r_Vt);
          s_GWs[j][i] = r_lam0 * (r_G01 * Wr + r_G11 * Ws + r_G12 * r_Wt);

          r_Ut = r_lam0 * (r_G02 * Ur + r_G12 * Us + r_G22 * r_Ut);
          r_Vt = r_lam0 * (r_G02 * Vr + r_G12 * Vs + r_G22 * r_Vt);
          r_Wt = r_lam0 * (r_G02 * Wr + r_G12 * Ws + r_G22 * r_Wt);

          r_AU[k] += r_GwJ * r_lam1 * r_U[k];
          r_AV[k] += r_GwJ * r_lam1 * r_V[k];
          r_AW[k] += r_GwJ * r_lam1 * r_W[k];
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          dfloat AUtmp = 0, AVtmp = 0, AWtmp = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            // 9 shared, 18 flops => 12TB/s*18/(9*8) = 3TFLOPS/s
            dfloat Dmi = s_D[m][i];
            dfloat Dmj = s_D[m][j];
            dfloat Dkm = s_D[k][m];

            AUtmp += Dmi * s_GUr[j][m];
            AUtmp += Dmj * s_GUs[m][i];

            AVtmp += Dmi * s_GVr[j][m];
            AVtmp += Dmj * s_GVs[m][i];

            AWtmp += Dmi * s_GWr[j][m];
            AWtmp += Dmj * s_GWs[m][i];

            r_AU[m] += Dkm * r_Ut;
            r_AV[m] += Dkm * r_Vt;
            r_AW[m] += Dkm * r_Wt;
          }

          r_AU[k] += AUtmp;
          r_AV[k] += AVtmp;
          r_AW[k] += AWtmp;
        }
      }
    }

    // write out

    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++) {
          const dlong id = element * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          Aq[id + 0 * offset] = r_AU[k];
          Aq[id + 1 * offset] = r_AV[k];
          Aq[id + 2 * offset] = r_AW[k];
        }
      }
    }
  }
}

@kernel void axhelm_bk_v0(const dlong Nelements,
                          const dlong offset,
                          @restrict const dfloat*  ggeo,
                          @restrict const dfloat*  D,
                          @restrict const dfloat*  lambda,
                          @restrict const dfloat*  q,
                          @restrict dfloat*  Aq)
{
  for(dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_q[p_Nq][p_Nq];

    @shared dfloat s_Gqr[p_Nq][p_Nq];
    @shared dfloat s_Gqs[p_Nq][p_Nq];

    @exclusive dfloat r_qt, r_Gqt, r_Auk;
    @exclusive dfloat r_q[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_Aq[p_Nq];// array for results Au(i,j,0:N)

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;

    // array of threads
    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq * j + i]; // D is column major

        // load pencil of u into register
        const dlong base = i + j * p_Nq + e * p_Np;
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; ++k) {
          r_q[k] = q[base + k * p_Nq * p_Nq]; // prefetch operation
          r_Aq[k] = 0.f; // zero the accumulator
        }
      }
    }

    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0; k < p_Nq; ++k) {
      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // prefetch geometric factors
          const dlong gbase = e * p_Nggeo * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          r_G00 = ggeo[gbase + p_G00ID * p_Np];
          r_G01 = ggeo[gbase + p_G01ID * p_Np];
          r_G02 = ggeo[gbase + p_G02ID * p_Np];

          r_G11 = ggeo[gbase + p_G11ID * p_Np];
          r_G12 = ggeo[gbase + p_G12ID * p_Np];
          r_G22 = ggeo[gbase + p_G22ID * p_Np];

          r_GwJ = ggeo[gbase + p_GWJID * p_Np];
        }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // share u(:,:,k)
          s_q[j][i] = r_q[k];

          r_qt = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; ++m)
            r_qt += s_D[k][m] * r_q[m];
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          dfloat qr = 0.f;
          dfloat qs = 0.f;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; ++m) {
            qr += s_D[i][m] * s_q[j][m];
            qs += s_D[j][m] * s_q[m][i];
          }

          s_Gqs[j][i] = (r_G01 * qr + r_G11 * qs + r_G12 * r_qt);
          s_Gqr[j][i] = (r_G00 * qr + r_G01 * qs + r_G02 * r_qt);

          // put this here for a performance bump
          r_Gqt = (r_G02 * qr + r_G12 * qs + r_G22 * r_qt);
          //r_Auk = r_GwJ*lambda[1]*r_q[k];
          r_Auk = 0;
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; ++m) {
            r_Auk   += s_D[m][j] * s_Gqs[m][i];
            r_Aq[m] += s_D[k][m] * r_Gqt; // DT(m,k)*ut(i,j,k,e)
            r_Auk   += s_D[m][i] * s_Gqr[j][m];
          }

          r_Aq[k] += r_Auk;
        }
      }
    }

    // write out

    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; ++k) {
          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          Aq[id] = r_Aq[k];
        }
      }
    }
  }
}

@kernel void axhelmPartial_bk_v0(const dlong Nelements,
                                 const dlong offset,
                                 @restrict const dlong*  elementList,
                                 @restrict const dfloat*  ggeo,
                                 @restrict const dfloat*  D,
                                 @restrict const dfloat*  lambda,
                                 @restrict const dfloat*  q,
                                 @restrict dfloat*  Aq)
{
  for(dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_q[p_Nq][p_Nq];

    @shared dfloat s_Gqr[p_Nq][p_Nq];
    @shared dfloat s_Gqs[p_Nq][p_Nq];

    @exclusive dfloat r_qt, r_Gqt, r_Auk;
    @exclusive dfloat r_q[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_Aq[p_Nq];// array for results Au(i,j,0:N)

    @exclusive dlong element;

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;

    // array of threads
    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq * j + i]; // D is column major
        element = elementList[e];

        // load pencil of u into register
        const dlong base = i + j * p_Nq + element * p_Np;
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; ++k) {
          r_q[k] = q[base + k * p_Nq * p_Nq]; // prefetch operation
          r_Aq[k] = 0.f; // zero the accumulator
        }
      }
    }

    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0; k < p_Nq; ++k) {
      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // prefetch geometric factors
          const dlong gbase = element * p_Nggeo * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          r_G00 = ggeo[gbase + p_G00ID * p_Np];
          r_G01 = ggeo[gbase + p_G01ID * p_Np];
          r_G02 = ggeo[gbase + p_G02ID * p_Np];

          r_G11 = ggeo[gbase + p_G11ID * p_Np];
          r_G12 = ggeo[gbase + p_G12ID * p_Np];
          r_G22 = ggeo[gbase + p_G22ID * p_Np];

          r_GwJ = ggeo[gbase + p_GWJID * p_Np];
        }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // share u(:,:,k)
          s_q[j][i] = r_q[k];

          r_qt = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; ++m)
            r_qt += s_D[k][m] * r_q[m];
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          dfloat qr = 0.f;
          dfloat qs = 0.f;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; ++m) {
            qr += s_D[i][m] * s_q[j][m];
            qs += s_D[j][m] * s_q[m][i];
          }

          s_Gqs[j][i] = (r_G01 * qr + r_G11 * qs + r_G12 * r_qt);
          s_Gqr[j][i] = (r_G00 * qr + r_G01 * qs + r_G02 * r_qt);

          // put this here for a performance bump
          r_Gqt = (r_G02 * qr + r_G12 * qs + r_G22 * r_qt);
          //r_Auk = r_GwJ*lambda[1]*r_q[k];
          r_Auk = 0;
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; ++m) {
            r_Auk   += s_D[m][j] * s_Gqs[m][i];
            r_Aq[m] += s_D[k][m] * r_Gqt; // DT(m,k)*ut(i,j,k,e)
            r_Auk   += s_D[m][i] * s_Gqr[j][m];
          }

          r_Aq[k] += r_Auk;
        }
      }
    }

    // write out

    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; ++k) {
          const dlong id = element * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          Aq[id] = r_Aq[k];
        }
      }
    }
  }
}

@kernel void axhelm_stress_n3_v0(const dlong Nelements,
                                 const dlong offset,
                                 @restrict const dfloat *vgeo,
                                 @restrict const dfloat *D,
                                 @restrict const dfloat *lambda,
                                 @restrict const dfloat *q,
                                 @restrict dfloat *Aq){
for(dlong e=0; e<Nelements; ++e; @outer(0)){
  // AK: heavy memory usage, optimize later
    @shared dfloat s_D[p_Nq][p_Nq];

    @shared dfloat s_U[p_Nq][p_Nq];
    @shared dfloat s_V[p_Nq][p_Nq];
    @shared dfloat s_SUr[p_Nq][p_Nq];
    @shared dfloat s_SUs[p_Nq][p_Nq];
    @shared dfloat s_W[p_Nq][p_Nq];
    @exclusive dfloat s_Uloc[p_Nq];
    @exclusive dfloat s_Vloc[p_Nq];
    @exclusive dfloat s_Wloc[p_Nq];

    @exclusive dfloat s_SUtloc[p_Nq];

    @shared dfloat s_SVr[p_Nq][p_Nq];
    @shared dfloat s_SVs[p_Nq][p_Nq];
    @exclusive dfloat s_SVt[p_Nq];

    @shared dfloat s_SWr[p_Nq][p_Nq];
    @shared dfloat s_SWs[p_Nq][p_Nq];
    @exclusive dfloat s_SWt[p_Nq];
    //
    @exclusive dfloat rx , ry, rz;
    @exclusive dfloat sx , sy, sz;
    @exclusive dfloat tx , ty, tz;

    // Symmetric Stress Tensor
    @exclusive dfloat s11,s12,s13;
    @exclusive dfloat s21,s22,s23;
    @exclusive dfloat s31,s32,s33;


    @exclusive dfloat r_Au[p_Nq];
    @exclusive dfloat r_Av[p_Nq];
    @exclusive dfloat r_Aw[p_Nq];

    for(int k=0;k<p_Nq;++k){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          if(k==0) s_D[j][i] = D[p_Nq*j+i];
            const dlong id = e*p_Np+k*p_Nq*p_Nq+j*p_Nq+i;
            s_U[j][i] = q[id + 0*offset];
            s_V[j][i] = q[id + 1*offset];
            s_W[j][i] = q[id + 2*offset];
          if(k==0){
            #pragma unroll p_Nq
            for(int l = 0 ; l < p_Nq; ++l){
              const dlong other_id = e*p_Np+l*p_Nq*p_Nq+j*p_Nq+i;
              s_Uloc[l] = q[other_id + 0*offset];
              s_Vloc[l] = q[other_id + 1*offset];
              s_Wloc[l] = q[other_id + 2*offset];
            }
          }
        }
      }
      @barrier("local");
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          const dlong gid = i + j*p_Nq + k*p_Nq*p_Nq + e*p_Np*p_Nvgeo;
          rx = vgeo[gid + p_RXID*p_Np];
          ry = vgeo[gid + p_RYID*p_Np];
          rz = vgeo[gid + p_RZID*p_Np];

          sx = vgeo[gid + p_SXID*p_Np];
          sy = vgeo[gid + p_SYID*p_Np];
          sz = vgeo[gid + p_SZID*p_Np];

          tx = vgeo[gid + p_TXID*p_Np];
          ty = vgeo[gid + p_TYID*p_Np];
          tz = vgeo[gid + p_TZID*p_Np];

          const dfloat JW = vgeo[gid + p_JWID*p_Np];

          // compute 1D derivatives
          dfloat ur = 0.f, us = 0.f, ut = 0.f;
          dfloat vr = 0.f, vs = 0.f, vt = 0.f;
          dfloat wr = 0.f, ws = 0.f, wt = 0.f;
          for(int m=0;m<p_Nq;++m){
            const dfloat Dim = s_D[i][m]; // Dr
            const dfloat Djm = s_D[j][m]; // Ds
            const dfloat Dkm = s_D[k][m]; // Dt

            ur += Dim*s_U[j][m];
            us += Djm*s_U[m][i];
            ut += Dkm*s_Uloc[m];
            //
            vr += Dim*s_V[j][m];
            vs += Djm*s_V[m][i];
            vt += Dkm*s_Vloc[m];
            //
            wr += Dim*s_W[j][m];
            ws += Djm*s_W[m][i];
            wt += Dkm*s_Wloc[m];
          }

          const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;

          const dfloat dudx = rx*ur + sx*us + tx*ut;
          const dfloat dudy = ry*ur + sy*us + ty*ut;
          const dfloat dudz = rz*ur + sz*us + tz*ut;

          const dfloat dvdx = rx*vr + sx*vs + tx*vt;
          const dfloat dvdy = ry*vr + sy*vs + ty*vt;
          const dfloat dvdz = rz*vr + sz*vs + tz*vt;

          const dfloat dwdx = rx*wr + sx*ws + tx*wt;
          const dfloat dwdy = ry*wr + sy*ws + ty*wt;
          const dfloat dwdz = rz*wr + sz*ws + tz*wt;

          s11 = JW*(dudx + dudx);
          s12 = JW*(dudy + dvdx);
          s13 = JW*(dudz + dwdx);

          s21 = JW*(dvdx + dudy);
          s22 = JW*(dvdy + dvdy);
          s23 = JW*(dvdz + dwdy);

          s31 = JW*(dwdx + dudz);
          s32 = JW*(dwdy + dvdz);
          s33 = JW*(dwdz + dwdz);
          // store in register
          r_Au[k] =  lambda[id+ 1 * offset]*JW*s_U[j][i];
          r_Av[k] =  lambda[id+ 1 * offset]*JW*s_V[j][i];
          r_Aw[k] =  lambda[id+ 1 * offset]*JW*s_W[j][i];

        }
      }
      @barrier("local");
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

         s_SUr[j][i] =  rx*s11 + ry*s12 + rz*s13;
         s_SUs[j][i] =  sx*s11 + sy*s12 + sz*s13;
         s_SUtloc[k] =  tx*s11 + ty*s12 + tz*s13;
         //
         s_SVr[j][i] =  rx*s21 + ry*s22 + rz*s23;
         s_SVs[j][i] =  sx*s21 + sy*s22 + sz*s23;
         s_SVt[k] =  tx*s21 + ty*s22 + tz*s23;
         //
         s_SWr[j][i] =  rx*s31 + ry*s32 + rz*s33;
         s_SWs[j][i] =  sx*s31 + sy*s32 + sz*s33;
         s_SWt[k] =  tx*s31 + ty*s32 + tz*s33;

        }
      }
      @barrier("local");
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
           #pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            const dfloat Dim = s_D[m][i]; // Dr'
            const dfloat Djm = s_D[m][j]; // Ds'

            r_Au[k] += Dim*s_SUr[j][m];
            r_Au[k] += Djm*s_SUs[m][i];

            r_Av[k] += Dim*s_SVr[j][m];
            r_Av[k] += Djm*s_SVs[m][i];

            r_Aw[k] += Dim*s_SWr[j][m];
            r_Aw[k] += Djm*s_SWs[m][i];
          }
        }
      }
    }

    for(int k=0;k<p_Nq;++k){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
           #pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            const dfloat Dkm = s_D[m][k]; // Dt'

            r_Au[k] += Dkm*s_SUtloc[m];
            r_Av[k] += Dkm*s_SVt[m];
            r_Aw[k] += Dkm*s_SWt[m];
          }
          const dlong id = e*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
          Aq[id+0*offset] = r_Au[k];
          Aq[id+1*offset] = r_Av[k];
          Aq[id+2*offset] = r_Aw[k];

        }
      }
    }
  }
}
