/*

   The MIT License (MIT)

   Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.

 */

// WARNING: p_NthreadsUpdatePCG must be a power of 2

@kernel void BPUpdatePCG(const dlong N,
                         const dlong Nblocks,
                         @restrict const dfloat* invDegree,
                         @restrict const dfloat* p,
                         @restrict const dfloat* Ap,
                         const dfloat alpha,
                         @restrict dfloat* x,
                         @restrict dfloat* r,
                         @restrict dfloat* redr)
{
  for(dlong b = 0; b < Nblocks; ++b; @outer(0)) {
#if 0
    @shared volatile dfloat s_sum[p_NthreadsUpdatePCG];
    @shared volatile dfloat s_warpSum[p_NwarpsUpdatePCG]; // good  to 256
#else
    @shared dfloat s_sum[p_NthreadsUpdatePCG];
    @shared dfloat s_warpSum[p_NwarpsUpdatePCG]; // good  to 256
#endif

    @exclusive int r_n; // limited to 256 in Serial mode

    for(int t = 0; t < p_NthreadsUpdatePCG; ++t; @inner(0)) {
      r_n = t % 32;

      dfloat sum = 0;

      //      for(int n=t+b*p_NthreadsUpdatePCG;n<N;n+=p_NblocksReset*p_NthreadsUpdatePCG){
      for(int n = t + b * p_NthreadsUpdatePCG; n < N; n += Nblocks * p_NthreadsUpdatePCG) {
        dfloat rn = r[n];
        dfloat xn = x[n];
        const dfloat invD = invDegree[n];
        const dfloat pn = p[n];
        const dfloat Apn = Ap[n];

        xn += alpha * pn;
        rn -= alpha * Apn;
        sum += invD * rn * rn;

        r[n] = rn;
        x[n] = xn;
      }

      s_sum[t] = sum;
    }

    // reduce by factor of 32
    for(int t = 0; t < p_NthreadsUpdatePCG; ++t; @inner(0)) if(r_n < 16) s_sum[t] += s_sum[t + 16];
    for(int t = 0; t < p_NthreadsUpdatePCG; ++t; @inner(0)) if(r_n < 8) s_sum[t] += s_sum[t + 8];
    for(int t = 0; t < p_NthreadsUpdatePCG; ++t; @inner(0)) if(r_n < 4) s_sum[t] += s_sum[t + 4];
    for(int t = 0; t < p_NthreadsUpdatePCG; ++t; @inner(0)) if(r_n < 2) s_sum[t] += s_sum[t + 2];

    for(int t = 0; t < p_NthreadsUpdatePCG; ++t; @inner(0)) {
      const int w = t / 32;
      if(r_n < 1) s_warpSum[w] = s_sum[t] + s_sum[t + 1];
    }

    //    @barrier("local");

    // 4 => 1
#if (p_NwarpsUpdatePCG >= 32)
    for(int t = 0; t < p_NthreadsUpdatePCG; ++t; @inner(0))
      if(t < 16) s_warpSum[t] += s_warpSum[t + 16];
#endif
#if (p_NwarpsUpdatePCG >= 16)
    for(int t = 0; t < p_NthreadsUpdatePCG; ++t; @inner(0))
      if(t < 8) s_warpSum[t] += s_warpSum[t + 8];
#endif

#if (p_NwarpsUpdatePCG >= 8)
    for(int t = 0; t < p_NthreadsUpdatePCG; ++t; @inner(0))
      if(t < 4) s_warpSum[t] += s_warpSum[t + 4];
#endif

#if (p_NwarpsUpdatePCG >= 4)
    for(int t = 0; t < p_NthreadsUpdatePCG; ++t; @inner(0))
      if(t < 2) s_warpSum[t] += s_warpSum[t + 2];
#endif

    for(int t = 0; t < p_NthreadsUpdatePCG; ++t; @inner(0)) {
      dfloat res = 0;
      if(t == 0) {
#if (p_NwarpsUpdatePCG >= 2)
        res = s_warpSum[0] + s_warpSum[1];
#else
        res = s_warpSum[0];
#endif

//	atomicAdd(redr, res);
        redr[b] = res;
      }
    }
  }
}

@kernel void BPUpdatePCG_v1(const dlong N,
                            const dlong Nblocks,
                            @restrict const dfloat* invDegree,
                            @restrict const dfloat* p,
                            @restrict const dfloat* Ap,
                            const dfloat alpha,
                            @restrict dfloat* x,
                            @restrict dfloat* r,
                            @restrict dfloat* redr)
{
  //#define MAXB 480
#define MAXB 660

  //  for(dlong b=0;b<(N+p_NthreadsUpdatePCG-1)/p_NthreadsUpdatePCG;++b;@outer(0)){
  for(dlong b = 0; b < MAXB; ++b; @outer(0)) {
    @shared volatile dfloat s_sum[p_NthreadsUpdatePCG];
    @shared volatile dfloat s_warpSum[p_NwarpsUpdatePCG]; // good  to 256

    @exclusive int r_n; // limited to 256 in Serial mode

    for(int t = 0; t < p_NthreadsUpdatePCG; ++t; @inner(0)) {
      r_n = t % 32;

      dfloat sum = 0;

      //      for(int n=t+b*p_NthreadsUpdatePCG;n<N;n+=MAXB*p_NthreadsUpdatePCG){
      int n = t + b * p_NthreadsUpdatePCG;
      while(n < N) {
        const dfloat invD = invDegree[n];
        const dfloat pn = p[n];

        x[n] += alpha * pn;

        const dfloat Apn = Ap[n];

        dfloat rn = r[n];

        rn -= alpha * Apn;
        sum += invD * rn * rn;

        r[n] = rn;

        n += MAXB * p_NthreadsUpdatePCG;
      }

      s_sum[t] = sum;
    }

    // reduce by factor of 32
    for(int t = 0; t < p_NthreadsUpdatePCG; ++t; @inner(0)) {
      if(r_n < 16) s_sum[t] += s_sum[t + 16]; // assumes only 32 way
      if(r_n < 8) s_sum[t] += s_sum[t + 8];
      if(r_n < 4) s_sum[t] += s_sum[t + 4];
      if(r_n < 2) s_sum[t] += s_sum[t + 2];

      if(r_n < 1) {
        const int w = t / 32;
        s_warpSum[w] = s_sum[t] + s_sum[t + 1];
      }
    }

    @barrier("local");

    // 4 => 1

    for(int t = 0; t < p_NthreadsUpdatePCG; ++t; @inner(0)) {
#if (p_NwarpUpdatePCG >= 32)
      if(t < 16) s_warpSum[t] += s_warpSum[t + 16];
#endif
#if (p_NwarpsUpdatePCG >= 16)
      if(t < 8) s_warpSum[t] += s_warpSum[t + 8];
#endif
#if (p_NwarpsUpdatePCG >= 8)
      if(t < 4) s_warpSum[t] += s_warpSum[t + 4];
#endif
#if (p_NwarpsUpdatePCG >= 4)
      if(t < 2) s_warpSum[t] += s_warpSum[t + 2];
#endif
      dfloat res = 0;
      if(t == 0) {
#if (p_NwarpsUpdatePCG >= 2)
        res = s_warpSum[0] + s_warpSum[1];
#else
        res = s_warpSum[0];
#endif

//	atomicAdd(redr, res);
        redr[b] = res;
      }
    }
  }
}

@kernel void BPMultipleUpdatePCG(const dlong N,
                                 const dlong offset,
                                 const dlong Nblocks,
                                 @restrict const dfloat* invDegree,
                                 @restrict const dfloat* p,
                                 @restrict const dfloat* Ap,
                                 const dfloat alpha,
                                 @restrict dfloat* x,
                                 @restrict dfloat* r,
                                 @restrict dfloat* redr)
{
  for(dlong b = 0; b < Nblocks; ++b; @outer(0)) {
    @shared volatile dfloat s_sum[p_NthreadsUpdatePCG];
    @shared volatile dfloat s_warpSum[p_NwarpsUpdatePCG]; // good  to 256

    @exclusive int r_n; // limited to 256 in Serial mode

    for(int t = 0; t < p_NthreadsUpdatePCG; ++t; @inner(0)) {
      r_n = t % 32;

      dfloat sum = 0;

      for(int n = t + b * p_NthreadsUpdatePCG; n < N; n += Nblocks * p_NthreadsUpdatePCG) {
        dfloat wn = invDegree[n];

        for(int fld = 0; fld < p_Nfields; ++fld) {
          dlong id = n + offset * fld;
          dfloat xn = x[id];
          dfloat rn = r[id];

          const dfloat pn = p[id];
          const dfloat Apn = Ap[id];

          xn += alpha * pn;
          rn -= alpha * Apn;
          sum += wn * rn * rn;

          x[id] = xn;
          r[id] = rn;
        }
      }

      s_sum[t] = sum;
    }

    // reduce by factor of 32
    for(int t = 0; t < p_NthreadsUpdatePCG; ++t; @inner(0)) if(r_n < 16) s_sum[t] += s_sum[t + 16];
    for(int t = 0; t < p_NthreadsUpdatePCG; ++t; @inner(0)) if(r_n < 8) s_sum[t] += s_sum[t + 8];
    for(int t = 0; t < p_NthreadsUpdatePCG; ++t; @inner(0)) if(r_n < 4) s_sum[t] += s_sum[t + 4];
    for(int t = 0; t < p_NthreadsUpdatePCG; ++t; @inner(0)) if(r_n < 2) s_sum[t] += s_sum[t + 2];

    for(int t = 0; t < p_NthreadsUpdatePCG; ++t; @inner(0)) {
      const int w = t / 32;
      if(r_n < 1) s_warpSum[w] = s_sum[t] + s_sum[t + 1];
    }

    @barrier("local");

    // 4 => 1
#if (p_NwarpsUpdatePCG >= 32)
    for(int t = 0; t < p_NthreadsUpdatePCG; ++t; @inner(0))
      if(t < 16) s_warpSum[t] += s_warpSum[t + 16];
#endif
#if (p_NwarpsUpdatePCG >= 16)
    for(int t = 0; t < p_NthreadsUpdatePCG; ++t; @inner(0))
      if(t < 8) s_warpSum[t] += s_warpSum[t + 8];
#endif

#if (p_NwarpsUpdatePCG >= 8)
    for(int t = 0; t < p_NthreadsUpdatePCG; ++t; @inner(0))
      if(t < 4) s_warpSum[t] += s_warpSum[t + 4];
#endif

#if (p_NwarpsUpdatePCG >= 4)
    for(int t = 0; t < p_NthreadsUpdatePCG; ++t; @inner(0))
      if(t < 2) s_warpSum[t] += s_warpSum[t + 2];
#endif

    for(int t = 0; t < p_NthreadsUpdatePCG; ++t; @inner(0)) {
      dfloat res = 0;
      if(t == 0) {
#if (p_NwarpsUpdatePCG >= 2)
        res = s_warpSum[0] + s_warpSum[1];
#else
        res = s_warpSum[0];
#endif

//	atomicAdd(redr, res);
        redr[b] = res;
      }
    }
  }
}
